.PHONY: clean fclean re all os check_sources check_headers

# Name of target executable
NAME		= ChanBot

# Locations 
SRC_DIR		= srcs
INC_DIR		= includes
BIN_DIR		= bin
LIB_DIR		= lib

PATH_SCORE	= ../srcs/core
PATH_SUTIL	= ../srcs/utils
PATH_HCORE	= ../includes/core
PATH_HUTIL	= ../includes/utils

# Sources & Headers 
# - fill only with name of the file
# - make will check for the file in SRC_DIR
# - use "-" if empty
SRCS		=	ChanBot.cpp \
				main.cpp	
HEAD		=	ChanBot.hpp

SRCSCORE	=	SockStream.cpp \
				SockHandler.cpp \
				SockManager.cpp \
				AClient.cpp \
				Package.cpp \
				Protocol.cpp \
				IRCProtocol.cpp



HEADCORE	=	SockStream.hpp \
				SockHandler.hpp \
				SockManager.hpp \
				AClient.hpp \
				Protocol.cpp \
				IRCProtocol.hpp \
				AServer.hpp \
				Package.hpp

SRCSUTILS	=	Logger.cpp 

HEADUTILS	=	ntos.hpp \
				Logger.hpp

# Librarys (only for local archives in project folder)
LIBRARYS	= 

# OS Detecting 
# Compiler and flags (include and library include are autogenerated if they are local)
OPENSSL_VERSION=1.1
ifeq ($(OS),Windows_NT)
    OSDETECT = WIN32
	CPP_FLAGS += -DWIN32
else
    UNAME_S := $(shell uname -s)
    ifeq ($(UNAME_S),Linux)
        OSDETECT = LINUX
		CPP_FLAGS += -DLINUX
		OPENSSL_PATH := /usr/
    endif
    ifeq ($(UNAME_S),Darwin)
        OSDETECT = OSX
		CPP_FLAGS += -DOSX
		OPENSSL_PATH = $(shell brew --prefix openssl@$(OPENSSL_VERSION))
    endif
endif


# Compiler and flags (include and library include are autogenerated if they are local)
OPENSSL_VERSION=1.1
OPENSSL_PATH= $(shell brew --prefix openssl@$(OPENSSL_VERSION))

CLANG		=	clang++
CPP_FLAGS	=	-Wextra -Wall -Werror -std=c++98 -g3 -fsanitize=address
CPP_IFLAGS	=	-I $(OPENSSL_PATH)/include

CPP_LFLAGS	= -lssl -lcrypto \
				-L  $(OPENSSL_PATH)/lib/ 

# Fancy prefixes 
PREFIX_PROJECT=[\033[1;32m$(NAME)\033[0m]
PREFIX_COMP=\033[1;30m-\033[0m-\033[1;37m>\033[0m[\033[1;32mâœ”\033[0m]
PREFIX_LINK=[\033[1;32mLINK\033[0m]
PREFIX_INFO=[\033[1;32mINFO\033[0m]
PREFIX_WARN=[\033[0;33mWARN\033[0m]
PREFIX_ERROR=[\033[0;91mERROR\033[0m]
PREFIX_DUPL=[\033[1;33mDUPLICATES\033[0m]
PREFIX_CLEAN=[\033[1;31mCLEAN\033[0m]


############################################################################################


SRC_FILES		=	$(shell find $(SRC_DIR) | grep -E '$(shell echo $(SRCS) | tr ' ' '|')')
CORE_S_FILES	=	$(shell find $(PATH_SCORE) | grep -E '$(shell echo $(SRCSCORE) | tr ' ' '|')')
UTILS_S_FILES	=	$(shell find $(PATH_SUTIL) | grep -E '$(shell echo $(SRCSUTILS) | tr ' ' '|')')

HEADER_FILES	=	$(shell find $(INC_DIR) | grep -E '$(shell echo $(HEAD)  | tr ' ' '|')')
CORE_H_FILES	=	$(shell find $(PATH_HCORE) | grep -E '$(shell echo $(HEADCORE)  | tr ' ' '|')')
UTILS_H_FILES	=	$(shell find $(PATH_HUTIL) | grep -E '$(shell echo $(HEADUTILS)  | tr ' ' '|')')
HEAD_ALL		=	$(HEADER_FILES) $(CORE_H_FILES) $(UTILS_H_FILES)

OBJS			=	$(addprefix $(BIN_DIR)/, $(SRC_FILES:.cpp=.o))
OBJS_CORE		=	$(addprefix $(BIN_DIR)/core, $(shell echo $(CORE_S_FILES:.cpp=.o) | sed "s|$(PATH_SCORE)||g"))
OBJS_UTILS		=	$(addprefix $(BIN_DIR)/utils,  $(shell echo $(UTILS_S_FILES:.cpp=.o) | sed "s|$(PATH_SUTIL)||g"))

OBJS_ALL		=	$(OBJS) $(OBJS_CORE) $(OBJS_UTILS)
CPP_IFLAGS		+=	$(addprefix -I,$(INC_DIR)) $(addprefix -I,$(shell echo $(HEAD_ALL) | tr ' ' '\n' | rev | cut -d'/' -f2- | rev | sort | uniq))
CPP_LFLAG		+=	$(addprefix -L,$(addprefix $(LIB_DIR), $(LIBRARYS)))

#   Main rule
all: select
	@echo "$(PREFIX_PROJECT)$(PREFIX_INFO) done"

os:
ifeq ($(OSDETECT),WIN32)
	@echo "$(PREFIX_PROJECT)$(PREFIX_ERROR) This project cannot compile yet on windows"
	@exit 0
endif
ifeq ($(OSDETECT), OSX)
	@echo "$(PREFIX_PROJECT)$(PREFIX_INFO) Compilation target: OSX"
endif
ifeq ($(OSDETECT), LINUX)
	@echo "$(PREFIX_PROJECT)$(PREFIX_INFO) Compilation target: Linux"
endif

select: CPP_FLAGS += -DSELECT
select: check_headers check_sources os $(NAME)
# select: clean $(NAME)

kqueue: CPP_FLAGS += -DKQUEUE
kqueue: clean check_headers check_sources os $(NAME)
# kqueue: $(NAME)

poll: CPP_FLAGS += -DPOLL
poll: clean check_headers check_sources os $(NAME)
# poll: $(NAME)

#	check_sources :
#	simple bash script to check duplicates sources files 
check_sources:
	@duplicates=$$( echo $(SRC_FILES) | tr ' ' '\n' | rev | cut -d'/' -f1 | rev | sort | uniq -c | sed 's/ //g' ) ; \
	error=0 ; \
	for source in $$duplicates ; do \
			if [ $$(echo $$source | sed 's/[^0-9]//g') -gt 1 ] ; then \
				echo "$(PREFIX_PROJECT)$(PREFIX_DUPL)" Duplicates source files found for \"$$(echo $$source | sed 's/[0-9]//g')\" in: ; \
				find $(SRC_DIR) | grep $$(echo $$source | sed 's/[0-9]//g') ; \
				echo ; \
				error=1 ; \
			fi \
	done ; \
	if [ $$error -eq 1 ] ; then \
		echo "Error: cannot manage duplicates files, aborting..." ; \
		exit 1 ; \
	fi

#	check_headers :
#	simple bash script to check duplicates header files 
check_headers:
	@duplicates=$$( echo $(HEADER_FILES) | tr ' ' '\n' | rev | cut -d'/' -f1 | rev | sort | uniq -c | sed 's/ //g' ) ; \
	error=0 ; \
	for source in $$duplicates ; do \
			if [ $$(echo $$source | sed 's/[^0-9]//g') -gt 1 ] ; then \
				echo "$(PREFIX_PROJECT)$(PREFIX_DUPL)" Duplicates header files found for \"$$(echo $$source | sed 's/[0-9]//g')\" in: ; \
				find $(INC_DIR) | grep $$(echo $$source | sed 's/[0-9]//g') ; \
				echo ; \
				error=1 ; \
			fi \
	done ; \
	if [ $$error -eq 1 ] ; then \
		echo "Error: cannot manage duplicates files, aborting..." ; \
		exit 1 ; \
	fi

#	Linking rule
$(NAME): $(BIN_DIR) $(OBJS_ALL)
	@$(CLANG) $(OBJS_ALL) -o $(NAME) $(CPP_FLAGS) $(CPP_LFLAGS)
	@echo "$(PREFIX_PROJECT)$(PREFIX_LINK) Linking done for: $(NAME)"

#	Bin directory
$(BIN_DIR):
	@echo "$(PREFIX_PROJECT)$(PREFIX_WARN) No bin dir found. Creating one."
	@mkdir -p $(BIN_DIR)

# Compilation rule 
$(BIN_DIR)/core/%.o : $(PATH_SCORE)/%.cpp $(HEAD_ALL)
	@mkdir -p $(shell dirname $@)
	@$(CLANG) -c $< -o $@ $(CPP_FLAGS) $(CPP_IFLAGS)
	@echo "$(PREFIX_PROJECT)$(PREFIX_COMP) Compiled: $(shell basename $<)"


# Compilation rule 
$(BIN_DIR)/utils/%.o : $(PATH_SUTIL)/%.cpp $(HEAD_ALL)
	@mkdir -p $(shell dirname $@)
	@$(CLANG) -c $< -o $@ $(CPP_FLAGS) $(CPP_IFLAGS)
	@echo "$(PREFIX_PROJECT)$(PREFIX_COMP) Compiled: $(shell basename $<)"


# Compilation rule 
$(BIN_DIR)/$(SRC_DIR)/%.o : $(SRC_DIR)/%.cpp $(HEAD_ALL)
	@mkdir -p $(BIN_DIR)/$(shell dirname $<)
	@$(CLANG) -c $< -o $@ $(CPP_FLAGS) $(CPP_IFLAGS)
	@echo "$(PREFIX_PROJECT)$(PREFIX_COMP) Compiled: $(shell basename $<)"


# clean rule
clean:
	@echo "$(PREFIX_PROJECT)$(PREFIX_CLEAN) Cleaning $(BIN_DIR)/"
	@rm -rf $(BIN_DIR)

# final clean rule
fclean: clean
	@echo "$(PREFIX_PROJECT)$(PREFIX_CLEAN) Cleaning $(NAME)"
	@rm -f $(NAME)

# remake rule
re: fclean all
